// Code generated by github.com/web-ridge/gqlgen-sqlboiler, DO NOT EDIT.
package {{.PackageName}}

import (
	"context"
	"fmt"
	"io"
	"strconv"
	"time"
	"sync"
	"errors"
	"bytes"
	"strings"

	"github.com/web-ridge/utils-go/boilergql/v3"
	"github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"

	"github.com/ericlagergren/decimal"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/null/v8"

	"database/sql"
	{{ range $import := .Imports }}
		{{ $import.Alias }} "{{ $import.ImportPath }}"
	{{ end }}
)



var TablePreloadMap = map[string]map[string]boilergql.ColumnSetting{
	{{ range $model := .Models -}}
	{{ if $model.IsPreloadable -}}
		{{ $.Backend.PackageName }}.{{- $model.TableNameResolverName }}.{{- $model.BoilerModel.TableName }}: {
			{{- range $value := $model.PreloadArray }}
				 "{{$value.Key}}": {
					 Name: {{$value.ColumnSetting.Name}},
					 RelationshipModelName: {{ $.Backend.PackageName }}.{{- $model.TableNameResolverName }}.{{$value.ColumnSetting.RelationshipModelName}},
					 IDAvailable: {{$value.ColumnSetting.IDAvailable}},
				},
			{{- end }}
		},
	{{ end -}}
	{{ end -}}
}

{{ range $model := .Models }}
	{{ if $model.IsPreloadable -}}
	func Get{{ .Name }}PreloadMods(ctx context.Context) (queryMods []qm.QueryMod) {
		return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, {{ $.Backend.PackageName }}.{{- $model.TableNameResolverName }}.{{ $model.BoilerModel.TableName }}, "")
	}
	func Get{{ .Name }}NodePreloadMods(ctx context.Context) (queryMods []qm.QueryMod) {
		return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, {{ $.Backend.PackageName }}.{{- $model.TableNameResolverName }}.{{ $model.BoilerModel.TableName }}, DefaultLevels.EdgesNode)
	}
	func Get{{ .Name }}PreloadModsWithLevel(ctx context.Context, level string) (queryMods []qm.QueryMod) {
		return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, {{ $.Backend.PackageName }}.{{- $model.TableNameResolverName }}.{{ $model.BoilerModel.TableName }}, level)
	}
	{{ end -}}
{{- end }}
{{ range $model := .Models }}
	{{ if .IsPayload -}}
	var {{ .Name }}PreloadLevels = struct {
		{{ range $field := .Fields }}
		{{- if $field.IsObject -}}
		{{- $field.Name }} string
		{{- end }}
		{{- end }}
	}{
		{{ range $field := .Fields }}
		{{- if $field.IsObject -}}
		{{- $field.Name }}: "{{- $field.JSONName }}",
		{{- end }}
		{{- end }}
	}
	{{ end }}
{{- end }}

var DefaultLevels = struct {
	EdgesNode string
}{
	EdgesNode: "edges.node",
}
