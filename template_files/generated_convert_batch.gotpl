// Code generated by github.com/web-ridge/gqlgen-sqlboiler, DO NOT EDIT.
package {{.PackageName}}

import (
	"context"
	"fmt"
	"io"
	"strconv"
	"time"
	"sync"
	"errors"
	"bytes"
	"strings"

	"github.com/web-ridge/utils-go/boilergql/v3"
	"github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"


	"github.com/ericlagergren/decimal"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/null/v8"

	"database/sql"
	{{ range $import := .Imports }}
		{{ $import.Alias }} "{{ $import.ImportPath }}"
	{{ end }}
)

const batchInsertStatement = "INSERT INTO %s (%s) VALUES %s"
{{ range $model := .Models }}
{{ if .IsCreateInput  }}

	var {{ lcFirst .BoilerModel.PluralName }}BatchCreateColumns = []string{
		{{- range $field := .BoilerModel.Fields -}}
			{{- if $field.InTableNotID -}}
				{{ $.Backend.PackageName }}.{{ $model.BoilerModel.Name }}Columns.{{- $field.Name }},
			{{- end -}}
		{{- end -}}
	}

	var {{ lcFirst .BoilerModel.PluralName }}BatchCreateColumnsMarks = boilergql.GetQuestionMarksForColumns({{ lcFirst .BoilerModel.PluralName }}BatchCreateColumns)

	func {{ lcFirst .BoilerModel.Name }}ToBatchCreateValues(e *{{ $.Backend.PackageName }}.{{ .BoilerModel.Name }}) []interface{} {
		return []interface{}{
			{{- range $field := .BoilerModel.Fields -}}
				{{- if $field.InTableNotID -}}
					e.{{- $field.Name }},
				{{- end -}}
			{{- end -}}
		}
	}

	func {{ lcFirst .BoilerModel.PluralName }}ToBatchCreate(a []*{{ $.Backend.PackageName }}.{{ .BoilerModel.Name }}) ([]string, []interface{}) {
		queryMarks := make([]string, len(a))
		// nolint:prealloc
		var values []interface{}
		for i, boilerRow := range a {
			queryMarks[i] = {{ lcFirst .BoilerModel.PluralName }}BatchCreateColumnsMarks
			values = append(values, {{ lcFirst .BoilerModel.Name }}ToBatchCreateValues(boilerRow)...)
		}
		return queryMarks, values
	}

	func {{ .BoilerModel.PluralName }}ToBatchCreateQuery(a []*{{ $.Backend.PackageName }}.{{ .BoilerModel.Name }}) (string, []interface{}) {
		queryMarks, values := {{ lcFirst .BoilerModel.PluralName }}ToBatchCreate(a)
		// nolint: gosec -> remove warning because no user input without questions marks
		return fmt.Sprintf(batchInsertStatement,
			{{ $.Backend.PackageName }}.{{- .TableNameResolverName }}.{{ .BoilerModel.Name }},
			strings.Join({{ lcFirst .BoilerModel.PluralName }}BatchCreateColumns, ", "),
			strings.Join(queryMarks, ", "),
		), values
	}

{{ end }}
{{ end }}